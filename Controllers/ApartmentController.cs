using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using StudentApartments.Models;
using static Microsoft.AspNetCore.Hosting.Internal.HostingApplication;
using Microsoft.AspNetCore.Http;
using System.IO;
using System.Transactions;

namespace StudentApartments.Controllers
{
    public class ApartmentController : Controller
    {
        private readonly DatabaseContext _context;
        private readonly UserManager<User> _userManager;


        public ApartmentController(DatabaseContext context, UserManager<User> userManager)
        {
            _userManager = userManager;
            _context = context;
        }

        private async Task<Boolean> UserHasCorrectRole(int role)
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                throw new ApplicationException($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }
            return user.Role == role;
        }

        // GET: Apartment
        public async Task<IActionResult> Index()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return RedirectToAction("Login", "Account");
            }
            var approvedApartments = _context.Apartment.Where(a => a.Review.IsApproved);
            ViewData["role"] = user.Role;
            return View(approvedApartments);
        }

        [HttpGet]
        public IActionResult AccessDenied()
        {
            return View();
        }

        // GET: Apartment/Landlord
        public async Task<IActionResult> Landlord() {
            if (await UserHasCorrectRole(1)) {   
                var user = await _userManager.GetUserAsync(User);
                var userId = user.Id;

                if (user == null) {
                    throw new ApplicationException($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
                }

                var apartments = _context.Apartment.Where(a => a.IDOwner.Equals(user.Id));
                return View(apartments);
            } else {
                return Forbid();
            }
        }

        // GET: Apartment/List
        public async Task<IActionResult> List()
        {
            if (await UserHasCorrectRole(2))
            {
                return View(await _context.Apartment.ToListAsync());
            }
            else
            {
                return Forbid();
            }
        }

        // GET: Apartment/Admin
        [HttpGet]
        public async Task<IActionResult> Admin()
        {
            
            if(TempData["status"] == null){
                TempData["status"] = 0; 
            }

            if (await UserHasCorrectRole(2))
            {
                var nonApprovedApartments = _context.Apartment.Where(a => a.IDReview == null).ToList();
                return View(nonApprovedApartments);
            }
            else
            {
                return Forbid();
            }
        }

        // POST: Apartment/Admin/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Admin(int? id, [Bind("IsApproved,Feedback")] Review review) {
            if (!await UserHasCorrectRole(2)) {
                return Forbid();
            }
            var currentApartment = _context.Apartment.FirstOrDefault(a => a.ID == id);

            // Problem - apartment is null. Error 
            if (currentApartment == null) {
                return BadRequest();
            }

            if(ModelState.IsValid) {
                using (var transaction = _context.Database.BeginTransaction()){
                    try {
                        _context.Add(review);
                        _context.SaveChanges();
                    
                        //Set the IDReview foreign key to the id generated by our DB
                        currentApartment.IDReview = review.ID;
                        _context.Update(currentApartment);
                        _context.SaveChanges();

                        //Everything went well; commit the transaction!
                        transaction.Commit();
                        return RedirectToAction(nameof(Admin));
                    } catch (Exception) {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
            return View(review);
        }

        // GET: Apartment/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var apartment = await _context.Apartment
                .SingleOrDefaultAsync(m => m.ID == id);
            if (apartment == null)
            {
                return NotFound();
            }

            return View(apartment);
        }

        // GET: Apartment/Create
        public async Task<IActionResult> Create()
        {

            if (!await UserHasCorrectRole(1))
            {
                return Forbid();
            }

            return View();
        }

        // POST: Apartment/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ID,Location,Description,Price")] Apartment apartment, IFormFile theimage){
            if (!await UserHasCorrectRole(1)) {
                return Forbid();
            }
            apartment.IDReview = null;
            //Handle error if image not uploaded
            if(theimage == null){
                return View(apartment);
            }

            //Convert image to base64 and prepend mime type
            string mimestr = theimage.ContentType;
            var ms = new MemoryStream();
            theimage.CopyTo(ms);
            string base64str = Convert.ToBase64String(ms.ToArray());
            apartment.Image = "data:" + mimestr + ";base64, " + base64str;

            //add landlords id to the apartment
            var user = await _userManager.GetUserAsync(User);
            apartment.IDOwner = user.Id;
            
            if (ModelState.IsValid && user.Id == apartment.IDOwner)
            {                
                _context.Add(apartment);
                _context.SaveChanges();
                return RedirectToAction(nameof(Landlord));
            }                      
            return View(apartment);
        }

        // GET: Apartment/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (!await UserHasCorrectRole(2))
            {
                return Forbid();
            }

            if (id == null)
            {
                return NotFound();
            }

            var apartment = await _context.Apartment.SingleOrDefaultAsync(m => m.ID == id);
            if (apartment == null)
            {
                return NotFound();
            }
            return View(apartment);
        }

        // POST: Apartment/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ID,IDOwner,Location,Description,Price,Image")] Apartment apartment)
        {
            if (!await UserHasCorrectRole(2))
            {
                return Forbid();
            }
            
            if (id != apartment.ID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(apartment.Review);
                    _context.Update(apartment);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ApartmentExists(apartment.ID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(apartment);
        }

        // GET: Apartment/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (!await UserHasCorrectRole(2))
            {
                return Forbid();
            }

            if (id == null)
            {
                return NotFound();
            }

            var apartment = await _context.Apartment
                .SingleOrDefaultAsync(m => m.ID == id);
            if (apartment == null)
            {
                return NotFound();
            }

            return View(apartment);
        }

        // POST: Apartment/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (!await UserHasCorrectRole(2))
            {
                return Forbid();
            }

            var apartment = await _context.Apartment.SingleOrDefaultAsync(m => m.ID == id);
            _context.Apartment.Remove(apartment);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ApartmentExists(int id)
        {
            return _context.Apartment.Any(e => e.ID == id);
        }
    }
}